apply plugin: 'com.android.library'

/*if (!hasProperty('DISABLE_ERROR_PRONE')) {
    apply plugin: "net.ltgt.errorprone"
}*/

tasks.withType(JavaCompile) {
    options.fork = true
}

dependencies {
    api project(':glide:third_party:gif_decoder')
    api project(':glide:third_party:disklrucache')
    api project(':glide:annotation')
    api "androidx.fragment:fragment:1.0.0"
    api "androidx.vectordrawable:vectordrawable-animated:1.0.0"
    api "androidx.exifinterface:exifinterface:1.2.0"
    compileOnly "androidx.appcompat:appcompat:1.0.0"

    if (project.plugins.hasPlugin('net.ltgt.errorprone')) {
        errorprone "com.google.errorprone:error_prone_core:${ERROR_PRONE_VERSION}"
    }

    testImplementation "androidx.appcompat:appcompat:1.0.0"
//    testImplementation project(':testutil')
    testImplementation 'com.google.guava:guava-testlib:18.0'
    testImplementation "com.google.truth:truth:0.45"
    testImplementation "junit:junit:4.13-beta-3"
    testImplementation "org.mockito:mockito-core:2.23.4"
    testImplementation "org.robolectric:robolectric:4.3.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.0.0-RC1"
    testImplementation "androidx.legacy:legacy-support-v4:1.0.0"
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionName "4.12.0"
        consumerProguardFiles 'proguard-rules.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

check.dependsOn(':library:findbugs:findbugs')
check.dependsOn(':library:pmd:pmd')
check.dependsOn(':library:test:check')

// Used in pmd and findbugs subprojects.
@SuppressWarnings("GroovyUnusedDeclaration")
def classPathForQuality() {
    return files(
            android.bootClasspath,
            project.configurations.compile,
            project.android.libraryVariants.collect { it.javaCompile.classpath }
    )
}

//apply from: "${rootProject.projectDir}/scripts/upload.gradle"
